{
  "_args": [
    [
      {
        "raw": "express-cluster@https://registry.npmjs.org/express-cluster/-/express-cluster-0.0.4.tgz",
        "scope": null,
        "escapedName": "express-cluster",
        "name": "express-cluster",
        "rawSpec": "https://registry.npmjs.org/express-cluster/-/express-cluster-0.0.4.tgz",
        "spec": "https://registry.npmjs.org/express-cluster/-/express-cluster-0.0.4.tgz",
        "type": "remote"
      },
      "/Users/mr_freelo/Work/afrostream-admin"
    ]
  ],
  "_from": "express-cluster@0.0.4",
  "_id": "express-cluster@0.0.4",
  "_inCache": true,
  "_location": "/express-cluster",
  "_phantomChildren": {},
  "_requested": {
    "raw": "express-cluster@https://registry.npmjs.org/express-cluster/-/express-cluster-0.0.4.tgz",
    "scope": null,
    "escapedName": "express-cluster",
    "name": "express-cluster",
    "rawSpec": "https://registry.npmjs.org/express-cluster/-/express-cluster-0.0.4.tgz",
    "spec": "https://registry.npmjs.org/express-cluster/-/express-cluster-0.0.4.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/express-cluster/-/express-cluster-0.0.4.tgz",
  "_shasum": "7aa5c39779bbc7550a30525d02b4c022e40b8798",
  "_shrinkwrap": null,
  "_spec": "express-cluster@https://registry.npmjs.org/express-cluster/-/express-cluster-0.0.4.tgz",
  "_where": "/Users/mr_freelo/Work/afrostream-admin",
  "author": {
    "name": "Eden Li",
    "email": "eli@flipboard.com"
  },
  "bugs": {
    "url": "https://github.com/Flipboard/express-cluster/issues"
  },
  "dependencies": {},
  "description": "Simple drop-in for express apps to spawn multiple processes",
  "devDependencies": {
    "coffee-script": "~1.10.0"
  },
  "homepage": "https://github.com/Flipboard/express-cluster",
  "keywords": [
    "cluster",
    "express",
    "http",
    "https",
    "net",
    "listener"
  ],
  "license": "BSD-3-Clause",
  "main": "lib/index.js",
  "name": "express-cluster",
  "optionalDependencies": {},
  "readme": "# express-cluster\n\nRun an express server on multiple processes. This is meant to be dropped in\ndirectly to your main entry point without having to setup a separate script\nthat manages workers.\n\nThis works with any EventListener that emits the `\"close\"` event and has a\n`close()` method. If it's a server object (e.g. an express app, `net.Server` or\n`http.Server`, ensure that you've invoked `listen` before returning it).\n\nBy default the module will spawn ''n'' processes where ''n'' is the number of\ncores you have. You should configure this parameter for your environment.\n\n## Synopsis\n\n    var express = require('express');\n    var cluster = require('express-cluster');\n\n    cluster(function(worker) {\n        var app = express();\n        app.get('/', function(req, res) {\n            res.send('hello from worker #' + worker.id);\n        });\n        return app.listen(0xbeef);\n    }, {count: 5})\n\n## API\n\nexpress-cluster exports itself as a function that accepts `config` and\n`workerFunctions` as arguments. These can be provided in either order:\n`cluster(config, workerFunction)` or `cluster(workerFunction, config)`.\n\nOnce node executes `cluster()` the current process will be forked the specified\nnumber of times. You should guard any code that should only be run in the\nmaster behind a check of `process.env.NODE_UNIQUE_ID` or a call to node's\n[cluster.isMaster](https://nodejs.org/api/cluster.html#cluster_cluster_ismaster)\n\n### `workerFunction`\n\nThis function is passed a `worker` object. See the node documentation for\n[Worker](https://nodejs.org/api/cluster.html#cluster_class_worker) for details.\n\n### `config`\n\nThis object should contain zero or more of these keys. Any other key/values are\nignored.\n\n    {\n        count: 5,       // number of workers to spawn: defaults to CPU core count\n        respawn: true,  // respawn process on exit: defaults to true\n        verbose: false, // log what happens to console: defaults to false\n\n        // Attach the given function to each spawned worker. The function will\n        // be bound to the worker that sent the message so you can setup a two\n        // way message bus if you please. See examples/messaging.js for an\n        // example.\n        workerListener: function(){}\n    }\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Flipboard/express-cluster.git"
  },
  "scripts": {
    "prepublish": "coffee -o lib/ -c src/index.coffee"
  },
  "version": "0.0.4"
}
